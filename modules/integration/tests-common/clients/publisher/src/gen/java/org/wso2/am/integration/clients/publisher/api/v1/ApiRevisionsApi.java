/*
 * WSO2 API Manager - Publisher API
 * This specifies a **RESTful API** for WSO2 **API Manager** - Publisher.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher/src/main/resources/publisher-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 
 *
 * OpenAPI spec version: v1.1
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.publisher.api.v1;

import org.wso2.am.integration.clients.publisher.api.ApiCallback;
import org.wso2.am.integration.clients.publisher.api.ApiClient;
import org.wso2.am.integration.clients.publisher.api.ApiException;
import org.wso2.am.integration.clients.publisher.api.ApiResponse;
import org.wso2.am.integration.clients.publisher.api.Configuration;
import org.wso2.am.integration.clients.publisher.api.Pair;
import org.wso2.am.integration.clients.publisher.api.ProgressRequestBody;
import org.wso2.am.integration.clients.publisher.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.wso2.am.integration.clients.publisher.api.v1.dto.APIDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.APIRevisionDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.APIRevisionDeploymentDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.APIRevisionDeploymentListDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.APIRevisionListDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiRevisionsApi {
    private ApiClient apiClient;

    public ApiRevisionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiRevisionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createAPIRevision
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param body API Revision object that needs to be added (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAPIRevisionCall(String apiId, APIRevisionDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/apis/{apiId}/revisions"
            .replaceAll("\\{" + "apiId" + "\\}", apiClient.escapeString(apiId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAPIRevisionValidateBeforeCall(String apiId, APIRevisionDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling createAPIRevision(Async)");
        }
        

        com.squareup.okhttp.Call call = createAPIRevisionCall(apiId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new API revision
     * Create a new API revision 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param body API Revision object that needs to be added (optional)
     * @return APIRevisionDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public APIRevisionDTO createAPIRevision(String apiId, APIRevisionDTO body) throws ApiException {
        ApiResponse<APIRevisionDTO> resp = createAPIRevisionWithHttpInfo(apiId, body);
        return resp.getData();
    }

    /**
     * Create a new API revision
     * Create a new API revision 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param body API Revision object that needs to be added (optional)
     * @return ApiResponse&lt;APIRevisionDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<APIRevisionDTO> createAPIRevisionWithHttpInfo(String apiId, APIRevisionDTO body) throws ApiException {
        com.squareup.okhttp.Call call = createAPIRevisionValidateBeforeCall(apiId, body, null, null);
        Type localVarReturnType = new TypeToken<APIRevisionDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new API revision (asynchronously)
     * Create a new API revision 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param body API Revision object that needs to be added (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAPIRevisionAsync(String apiId, APIRevisionDTO body, final ApiCallback<APIRevisionDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAPIRevisionValidateBeforeCall(apiId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<APIRevisionDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAPIRevision
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAPIRevisionCall(String apiId, String revisionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{apiId}/revisions/{revisionId}"
            .replaceAll("\\{" + "apiId" + "\\}", apiClient.escapeString(apiId.toString()))
            .replaceAll("\\{" + "revisionId" + "\\}", apiClient.escapeString(revisionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAPIRevisionValidateBeforeCall(String apiId, String revisionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling deleteAPIRevision(Async)");
        }
        
        // verify the required parameter 'revisionId' is set
        if (revisionId == null) {
            throw new ApiException("Missing the required parameter 'revisionId' when calling deleteAPIRevision(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAPIRevisionCall(apiId, revisionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a revision of an API
     * Delete a revision of an API 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @return APIRevisionListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public APIRevisionListDTO deleteAPIRevision(String apiId, String revisionId) throws ApiException {
        ApiResponse<APIRevisionListDTO> resp = deleteAPIRevisionWithHttpInfo(apiId, revisionId);
        return resp.getData();
    }

    /**
     * Delete a revision of an API
     * Delete a revision of an API 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @return ApiResponse&lt;APIRevisionListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<APIRevisionListDTO> deleteAPIRevisionWithHttpInfo(String apiId, String revisionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAPIRevisionValidateBeforeCall(apiId, revisionId, null, null);
        Type localVarReturnType = new TypeToken<APIRevisionListDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a revision of an API (asynchronously)
     * Delete a revision of an API 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAPIRevisionAsync(String apiId, String revisionId, final ApiCallback<APIRevisionListDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAPIRevisionValidateBeforeCall(apiId, revisionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<APIRevisionListDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deployAPIRevision
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param body Deployment object that needs to be added (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deployAPIRevisionCall(String apiId, String revisionId, List<APIRevisionDeploymentDTO> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/apis/{apiId}/deploy-revision"
            .replaceAll("\\{" + "apiId" + "\\}", apiClient.escapeString(apiId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (revisionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("revisionId", revisionId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deployAPIRevisionValidateBeforeCall(String apiId, String revisionId, List<APIRevisionDeploymentDTO> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling deployAPIRevision(Async)");
        }
        
        // verify the required parameter 'revisionId' is set
        if (revisionId == null) {
            throw new ApiException("Missing the required parameter 'revisionId' when calling deployAPIRevision(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deployAPIRevision(Async)");
        }
        

        com.squareup.okhttp.Call call = deployAPIRevisionCall(apiId, revisionId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deploy a revision
     * Deploy a revision 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param body Deployment object that needs to be added (required)
     * @return List&lt;APIRevisionDeploymentDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<APIRevisionDeploymentDTO> deployAPIRevision(String apiId, String revisionId, List<APIRevisionDeploymentDTO> body) throws ApiException {
        ApiResponse<List<APIRevisionDeploymentDTO>> resp = deployAPIRevisionWithHttpInfo(apiId, revisionId, body);
        return resp.getData();
    }

    /**
     * Deploy a revision
     * Deploy a revision 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param body Deployment object that needs to be added (required)
     * @return ApiResponse&lt;List&lt;APIRevisionDeploymentDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<APIRevisionDeploymentDTO>> deployAPIRevisionWithHttpInfo(String apiId, String revisionId, List<APIRevisionDeploymentDTO> body) throws ApiException {
        com.squareup.okhttp.Call call = deployAPIRevisionValidateBeforeCall(apiId, revisionId, body, null, null);
        Type localVarReturnType = new TypeToken<List<APIRevisionDeploymentDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deploy a revision (asynchronously)
     * Deploy a revision 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param body Deployment object that needs to be added (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deployAPIRevisionAsync(String apiId, String revisionId, List<APIRevisionDeploymentDTO> body, final ApiCallback<List<APIRevisionDeploymentDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deployAPIRevisionValidateBeforeCall(apiId, revisionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<APIRevisionDeploymentDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAPIRevision
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAPIRevisionCall(String apiId, String revisionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{apiId}/revisions/{revisionId}"
            .replaceAll("\\{" + "apiId" + "\\}", apiClient.escapeString(apiId.toString()))
            .replaceAll("\\{" + "revisionId" + "\\}", apiClient.escapeString(revisionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAPIRevisionValidateBeforeCall(String apiId, String revisionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling getAPIRevision(Async)");
        }
        
        // verify the required parameter 'revisionId' is set
        if (revisionId == null) {
            throw new ApiException("Missing the required parameter 'revisionId' when calling getAPIRevision(Async)");
        }
        

        com.squareup.okhttp.Call call = getAPIRevisionCall(apiId, revisionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a revision of an API
     * Retrieve a revision of an API 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @return APIRevisionDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public APIRevisionDTO getAPIRevision(String apiId, String revisionId) throws ApiException {
        ApiResponse<APIRevisionDTO> resp = getAPIRevisionWithHttpInfo(apiId, revisionId);
        return resp.getData();
    }

    /**
     * Retrieve a revision of an API
     * Retrieve a revision of an API 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @return ApiResponse&lt;APIRevisionDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<APIRevisionDTO> getAPIRevisionWithHttpInfo(String apiId, String revisionId) throws ApiException {
        com.squareup.okhttp.Call call = getAPIRevisionValidateBeforeCall(apiId, revisionId, null, null);
        Type localVarReturnType = new TypeToken<APIRevisionDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a revision of an API (asynchronously)
     * Retrieve a revision of an API 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAPIRevisionAsync(String apiId, String revisionId, final ApiCallback<APIRevisionDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAPIRevisionValidateBeforeCall(apiId, revisionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<APIRevisionDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAPIRevisionDeployments
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAPIRevisionDeploymentsCall(String apiId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{apiId}/deploy-revision"
            .replaceAll("\\{" + "apiId" + "\\}", apiClient.escapeString(apiId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAPIRevisionDeploymentsValidateBeforeCall(String apiId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling getAPIRevisionDeployments(Async)");
        }
        

        com.squareup.okhttp.Call call = getAPIRevisionDeploymentsCall(apiId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List available deployed revision deployment details of an API
     * List available deployed revision deployment details of an API 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @return APIRevisionDeploymentListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public APIRevisionDeploymentListDTO getAPIRevisionDeployments(String apiId) throws ApiException {
        ApiResponse<APIRevisionDeploymentListDTO> resp = getAPIRevisionDeploymentsWithHttpInfo(apiId);
        return resp.getData();
    }

    /**
     * List available deployed revision deployment details of an API
     * List available deployed revision deployment details of an API 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @return ApiResponse&lt;APIRevisionDeploymentListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<APIRevisionDeploymentListDTO> getAPIRevisionDeploymentsWithHttpInfo(String apiId) throws ApiException {
        com.squareup.okhttp.Call call = getAPIRevisionDeploymentsValidateBeforeCall(apiId, null, null);
        Type localVarReturnType = new TypeToken<APIRevisionDeploymentListDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List available deployed revision deployment details of an API (asynchronously)
     * List available deployed revision deployment details of an API 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAPIRevisionDeploymentsAsync(String apiId, final ApiCallback<APIRevisionDeploymentListDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAPIRevisionDeploymentsValidateBeforeCall(apiId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<APIRevisionDeploymentListDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAPIRevisions
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param query  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAPIRevisionsCall(String apiId, Object query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{apiId}/revisions"
            .replaceAll("\\{" + "apiId" + "\\}", apiClient.escapeString(apiId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAPIRevisionsValidateBeforeCall(String apiId, Object query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling getAPIRevisions(Async)");
        }
        

        com.squareup.okhttp.Call call = getAPIRevisionsCall(apiId, query, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List available revisions of an API
     * List available revisions of an API 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param query  (optional)
     * @return APIRevisionListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public APIRevisionListDTO getAPIRevisions(String apiId, Object query) throws ApiException {
        ApiResponse<APIRevisionListDTO> resp = getAPIRevisionsWithHttpInfo(apiId, query);
        return resp.getData();
    }

    /**
     * List available revisions of an API
     * List available revisions of an API 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param query  (optional)
     * @return ApiResponse&lt;APIRevisionListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<APIRevisionListDTO> getAPIRevisionsWithHttpInfo(String apiId, Object query) throws ApiException {
        com.squareup.okhttp.Call call = getAPIRevisionsValidateBeforeCall(apiId, query, null, null);
        Type localVarReturnType = new TypeToken<APIRevisionListDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List available revisions of an API (asynchronously)
     * List available revisions of an API 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param query  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAPIRevisionsAsync(String apiId, Object query, final ApiCallback<APIRevisionListDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAPIRevisionsValidateBeforeCall(apiId, query, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<APIRevisionListDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for restoreAPIRevision
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call restoreAPIRevisionCall(String apiId, String revisionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{apiId}/restore-revision"
            .replaceAll("\\{" + "apiId" + "\\}", apiClient.escapeString(apiId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (revisionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("revisionId", revisionId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restoreAPIRevisionValidateBeforeCall(String apiId, String revisionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling restoreAPIRevision(Async)");
        }
        
        // verify the required parameter 'revisionId' is set
        if (revisionId == null) {
            throw new ApiException("Missing the required parameter 'revisionId' when calling restoreAPIRevision(Async)");
        }
        

        com.squareup.okhttp.Call call = restoreAPIRevisionCall(apiId, revisionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Restore a revision
     * Restore a revision to the working copy of the API 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @return APIDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public APIDTO restoreAPIRevision(String apiId, String revisionId) throws ApiException {
        ApiResponse<APIDTO> resp = restoreAPIRevisionWithHttpInfo(apiId, revisionId);
        return resp.getData();
    }

    /**
     * Restore a revision
     * Restore a revision to the working copy of the API 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @return ApiResponse&lt;APIDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<APIDTO> restoreAPIRevisionWithHttpInfo(String apiId, String revisionId) throws ApiException {
        com.squareup.okhttp.Call call = restoreAPIRevisionValidateBeforeCall(apiId, revisionId, null, null);
        Type localVarReturnType = new TypeToken<APIDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Restore a revision (asynchronously)
     * Restore a revision to the working copy of the API 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restoreAPIRevisionAsync(String apiId, String revisionId, final ApiCallback<APIDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restoreAPIRevisionValidateBeforeCall(apiId, revisionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<APIDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for undeployAPIRevision
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param body Deployment object that needs to be added (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call undeployAPIRevisionCall(String apiId, String revisionId, List<APIRevisionDeploymentDTO> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/apis/{apiId}/undeploy-revision"
            .replaceAll("\\{" + "apiId" + "\\}", apiClient.escapeString(apiId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (revisionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("revisionId", revisionId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call undeployAPIRevisionValidateBeforeCall(String apiId, String revisionId, List<APIRevisionDeploymentDTO> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling undeployAPIRevision(Async)");
        }
        
        // verify the required parameter 'revisionId' is set
        if (revisionId == null) {
            throw new ApiException("Missing the required parameter 'revisionId' when calling undeployAPIRevision(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling undeployAPIRevision(Async)");
        }
        

        com.squareup.okhttp.Call call = undeployAPIRevisionCall(apiId, revisionId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Un-Deploy a revision
     * Un-Deploy a revision 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param body Deployment object that needs to be added (required)
     * @return List&lt;APIRevisionDeploymentDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<APIRevisionDeploymentDTO> undeployAPIRevision(String apiId, String revisionId, List<APIRevisionDeploymentDTO> body) throws ApiException {
        ApiResponse<List<APIRevisionDeploymentDTO>> resp = undeployAPIRevisionWithHttpInfo(apiId, revisionId, body);
        return resp.getData();
    }

    /**
     * Un-Deploy a revision
     * Un-Deploy a revision 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param body Deployment object that needs to be added (required)
     * @return ApiResponse&lt;List&lt;APIRevisionDeploymentDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<APIRevisionDeploymentDTO>> undeployAPIRevisionWithHttpInfo(String apiId, String revisionId, List<APIRevisionDeploymentDTO> body) throws ApiException {
        com.squareup.okhttp.Call call = undeployAPIRevisionValidateBeforeCall(apiId, revisionId, body, null, null);
        Type localVarReturnType = new TypeToken<List<APIRevisionDeploymentDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Un-Deploy a revision (asynchronously)
     * Un-Deploy a revision 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param body Deployment object that needs to be added (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call undeployAPIRevisionAsync(String apiId, String revisionId, List<APIRevisionDeploymentDTO> body, final ApiCallback<List<APIRevisionDeploymentDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = undeployAPIRevisionValidateBeforeCall(apiId, revisionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<APIRevisionDeploymentDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
